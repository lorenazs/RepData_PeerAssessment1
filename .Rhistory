library(RColorBrewer)
boxplot(DNase,col=brewer.pal(5,"Pastel2"),main="DNase")
xyplot(density,data=DNase,geom="bar",col=brewer.pal(5,"Pastel2"),main="barras1",xlab="density")
display.brewer.all()
data(trees)
boxplot(trees$Girth,main='BoxPlot de Girth',col='green')
boxplot(trees$Girth,trees$Height,trees$Volume,main='BoxPlot de Variables',col=brewer.pal(3,"Pastel2")
boxplot(trees$Girth,trees$Height,trees$Volume,main='BoxPlot de Variables',col=brewer.pal(3,"Pastel2")
boxplot(trees$Girth,trees$Height,trees$Volume,main='BoxPlot de Variables',col=brewer.pal(3,"Pastel2"))
boxplot(trees,col=brewer.pal(3,"Pastel2"),main='BoxPlot de Variables',from=5,to=100,by=5)
hist(trees$Girth)
qplot(x=Girth:y=Heights,data=trees,geom="bar",main='Gr?fico Barras',xlab='Girth',ylab=Height)
qplot(Girth,data=trees,facets=Height~.,geom="histogram")
qplot(Height,Volume,data=trees,facets=.~Girth)
trees$Girth
head(trees)
install.packages('igraph')
x=c(1,1,1,1)
y = c(2,2,2,2)
corr(x,y)
cor(x,y)
x=c(0,1,0,1)
y = c(1,0,1,0)
cor(x,y)
x=c(0,-1,0,1)
y = c(1,0,-1,0)
cor(x,y)
x=c(1,1,0,1,0,1)
y= c(1,1,1,0,0,1)
cor(x,y)
x=c(2,-1,0,2,0,-3)
y=c(-1,1,-1,0,0,-1)
cor(x,y)
m0<-matrix(NA,4,0)
rownames(m0)
m2<- cbind(1,1:4)
m2
colnames(m2,do.NULL=FALSE)
colnames(m2)<-c("x","y")
rownames(m2)<-rownames(m2,do.NULL=FALSE,prefix="OBS.")
m2
distancias<- matrix(c(1.00,0.10,0.41,0.55,0.35),nrow=1,ncol=5)
distancias
rbind(distancias,c(0.1,1.0,0.64,0.47,0.98))
distancias<-rbind(distancias,c(0.1,1.0,0.64,0.47,0.98))
distancias
distancias<-rbind(distancias,c(0.41,0.64,1.0,0.44,0.85))
distancias
distancias<-rbind(distancias,c(0.55,0.47,0.44,1.0,0.76))
distancias
distancias<-rbind(distancias,c(0.35,0.98,0.85,0.76,1.0))
distancias
rownames(distancias)<-c("p1","p2",'p3','p4','p5')
distancias
colnames(distancias)<-c('p1','p2','p3','p4','p5')
distancias
hc<-hclust(distancias)
mtcars
d<-dist(as.matrix(mtcars))
d
hc<-hclust(d)
plot(hc)
save.image("~/Documents/clusterEx.RData")
available.packages()
install.packages('KernSmooth')
library(KernSmooth)
library(datasets)
data(iris)
?iris
iris
x<- iris[,$Sepal.Length, Species == 'virginica']
x<- iris$Sepal.Length
x
x<- iris[,iris$Sepal.Length Species=='virginica']
x<- iris$Sepal.Length[,iris$Species=='virginica']
x<- iris[,iris$Species=='virginica']
x<- iris[,iris$Sepal.Length,iris$Species=='virginica']
x<- iris[,iris$Species=='virginica',iris$Sepal.Length]
x<- iris[iris$Species=='virginica',iris$Sepal.Length]
x<- iris[iris$Species=='virginica',]
x
x<-x$Sepal.Length
x
class(x)
apply(x,mean)
lapply(x,mean)
x
tapply(x,mean)
mean(x)
head(iris)
apply(iris,2,mean)
apply(iris[,1:4],2,mean)
library(datasets)
data(mtcars)
head(mtcars)
tapply(mtcars$mpg,mtcars$cyl,mean)
tapply(mtcars$cyl,mtcars$hp,mean)
tapply(mtcars$hp,mtcars$cyl,mean)
y<-tapply(mtcars$hp,mtcars$cyl,mean)
y
y[1]
y[[1]]
y[[1]]-y[[3]]
debug(ls)
ls
?ls
ls()
rankhospital <- function(state,outcome,num='best')
{
datos = read.csv('outcome-of-care-measures.csv',stringsAsFactors=FALSE)
colOutcome =0
superaCantidad = FALSE
resultadoRanking = NULL
if !any((datos$State == state))
{
stop('invalid state')
}
else
{
if colOutcome == 'heart attack'
{
colOutcome =11
}
else
{
if colOutcome == 'pneumonia'
{
colOutcome = 23
}
else
{
if colOutcome == 'heart failure'
{
colOutcome = 17
}
else
{
stop('invalid outcome')
}
}
}
}
if colOutcome !=0
{
#obtener casos completos para el outcome y el estado
datos = subset(datos,datos[,colOutcome] != 'Not Available' && datos[,7]==state)
datos[,colOutcome] = as.numeric(datos[,colOutcome])
# se quiere el mejor valor para el outcome
if num == 'best'
{
valorOut= min(datos[,colOutcome])
}
else
{
if num == 'worst'  #se busca el peor valor para el outcome
{
valorOut = max(datos[,colOutcome])
}
else #es cualquier otro valor
{
if is.numeric(valorOut)
{
valorOut = as.numeric(valorOut)
#determinar si es un valor superior a la cantidad de hospitales
if valorOut > len(datos[,colOutcome])
{
resultado = c(resultado,'NA')
superaCantidad = TRUE
}
else  #ordenar por valor del outcome y por nombre del hospital
{
datos = datos[order(datos[,colOutcome],datos[,2]),]
#obtener el outcom
valorOut = datos[posRanking,colOutcome]
}
}
}
}
if !supera
{
if(!(is.numeric(num)))
{
rango = c(1:length(datos[,colOutcome]))
for(i in rango)
{
if(datos[i,colOutcome]== valorCompara) #encontrar empates
{
#resultado=c(resultado,as.character(datos$Hospital.Name[i]))
resultado=c(resultado,datos$Hospital.Name[i])
}
}
if(length(resultado)>1) #hubo empate
{
resultado=sort(resultado)
}
}
else
{
resultado=c(resultado,datos$Hospital.Name[num])
}
}
resultado[1]
}
}
}
source('/Documentos/CURSOS/Coursera/Certification-DataScience/Rprogramming/week4/ProgAssignment3/rankhospital.R')
source('/Documentos/CURSOS/Coursera/Certification-DataScience/Rprogramming/week4/ProgAssignment3/rankhospital.R')
}
source('/Documentos/CURSOS/Coursera/Certification-DataScience/Rprogramming/week4/ProgAssignment3/rankhospital.R')
rankhospital('TX','heart failure',4)
source('/Documentos/CURSOS/Coursera/Certification-DataScience/Rprogramming/week4/ProgAssignment3/rankhospital.R')
resultado[1]
rankhospital('TX','heart failure',4)
rankhospital <- function(state,outcome,num='best')
{
datos = read.csv('outcome-of-care-measures.csv',stringsAsFactors=FALSE)
colOutcome =0
superaCantidad = FALSE
resultadoRanking = NULL
if !(any((datos$State == state)))
{
stop('invalid state')
}
else
{
if (colOutcome == 'heart attack')
{
colOutcome =11
}
else
{
if (colOutcome == 'pneumonia')
{
colOutcome = 23
}
else
{
if (colOutcome == 'heart failure')
{
colOutcome = 17
}
else
{
stop('invalid outcome')
}
}
}
}
if (colOutcome !=0)
{
#obtener casos completos para el outcome y el estado
datos = subset(datos,datos[,colOutcome] != 'Not Available' && datos[,7]==state)
datos[,colOutcome] = as.numeric(datos[,colOutcome])
# se quiere el mejor valor para el outcome
if (num == 'best')
{
valorOut= min(datos[,colOutcome])
}
else
{
if (num == 'worst')  #se busca el peor valor para el outcome
{
valorOut = max(datos[,colOutcome])
}
else #es cualquier otro valor
{
if is.numeric(valorOut)
{
valorOut = as.numeric(valorOut)
#determinar si es un valor superior a la cantidad de hospitales
if (valorOut > len(datos[,colOutcome]))
{
resultado = c(resultado,'NA')
superaCantidad = TRUE
}
else  #ordenar por valor del outcome y por nombre del hospital
{
datos = datos[order(datos[,colOutcome],datos[,2]),]
#obtener el outcom
valorOut = datos[posRanking,colOutcome]
}
}
}
}
if !(supera)
{
if(!(is.numeric(num)))
{
rango = c(1:length(datos[,colOutcome]))
for(i in rango)
{
if(datos[i,colOutcome]== valorCompara) #encontrar empates
{
#resultado=c(resultado,as.character(datos$Hospital.Name[i]))
resultado=c(resultado,datos$Hospital.Name[i])
}
}
if(length(resultado)>1) #hubo empate
{
resultado=sort(resultado)
}
}
else
{
resultado=c(resultado,datos$Hospital.Name[num])
}
}
resultado[1]
}
source('/Documentos/CURSOS/Coursera/Certification-DataScience/Rprogramming/week4/ProgAssignment3/rankhospital.R')
}
source('/Documentos/CURSOS/Coursera/Certification-DataScience/Rprogramming/week4/ProgAssignment3/rankhospital.R')
if (!(any((datos$State == state))))
source('/Documentos/CURSOS/Coursera/Certification-DataScience/Rprogramming/week4/ProgAssignment3/rankhospital.R')
{
source('/Documentos/CURSOS/Coursera/Certification-DataScience/Rprogramming/week4/ProgAssignment3/rankhospital.R')
rankhospital <- function(state,outcome,num='best')
{
datos = read.csv('outcome-of-care-measures.csv',stringsAsFactors=FALSE)
colOutcome =0
superaCantidad = FALSE
resultadoRanking = NULL
if (!(any((datos$State == state))))
{
stop('invalid state')
}
else
{
if (colOutcome == 'heart attack')
{
colOutcome =11
}
else
{
if (colOutcome == 'pneumonia')
{
colOutcome = 23
}
else
{
if (colOutcome == 'heart failure')
{
colOutcome = 17
}
else
{
stop('invalid outcome')
}
}
}
}
if (colOutcome !=0)
{
#obtener casos completos para el outcome y el estado
datos = subset(datos,datos[,colOutcome] != 'Not Available' && datos[,7]==state)
datos[,colOutcome] = as.numeric(datos[,colOutcome])
# se quiere el mejor valor para el outcome
if (num == 'best')
{
valorOut= min(datos[,colOutcome])
}
else
{
if (num == 'worst')  #se busca el peor valor para el outcome
{
valorOut = max(datos[,colOutcome])
}
else #es cualquier otro valor
{
if is.numeric(valorOut)
{
valorOut = as.numeric(valorOut)
#determinar si es un valor superior a la cantidad de hospitales
if (valorOut > len(datos[,colOutcome]))
{
resultado = c(resultado,'NA')
superaCantidad = TRUE
}
else  #ordenar por valor del outcome y por nombre del hospital
{
datos = datos[order(datos[,colOutcome],datos[,2]),]
#obtener el outcom
valorOut = datos[posRanking,colOutcome]
}
}
}
}
if !(supera)
{
if(!(is.numeric(num)))
{
rango = c(1:length(datos[,colOutcome]))
for(i in rango)
{
if(datos[i,colOutcome]== valorCompara) #encontrar empates
{
#resultado=c(resultado,as.character(datos$Hospital.Name[i]))
resultado=c(resultado,datos$Hospital.Name[i])
}
}
if(length(resultado)>1) #hubo empate
{
resultado=sort(resultado)
}
}
else
{
resultado=c(resultado,datos$Hospital.Name[num])
}
}
resultado[1]
}
}
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet,BodyWeight)
BodyWeight
library(datasets)
data(airquality)
p<-xyplot(Ozone~ Wind | factor(Month),data=airquality)
p
qplot(Wind,Ozone,data=airquality,facets=.~factor(Month))
library(ggplot2)
qplot(Wind,Ozone,data=airquality,facets=.~factor(Month))
qplot(Wind, Ozone,data=airquality, geom="smooth")
qplot(Wind,Ozone,data=airquality)
airquality
airquality=transform(airquality,Month=factor(Month))
qplot(Wind,Ozone,data=airquality,facets=.~ Month)
g<-ggplot(movies,aes(votes,rating))
print(g)
qplot(votes,rating,data=movies)
qplot(votes,rating,data=movies,smooth="loess")
qplot(votes,rating,data=movies)+geom_smooth()
qplot(votes,rating,data=movies)+stats_smooth("loess")
packages.install(knitr)
install.packages(knitr)
install.packages('knitr')
setwd("/Documentos/CURSOS/Coursera/Certification-DataScience/05-ReproducibleResearch/Proyecto1/RepData_PeerAssessment1")
activityData_all <- read.csv('activity.csv')
activityData <- na.omit(activityData_all)
activityData$date<-as.Date(activityData$date)
totalByDay <- aggregate(activityData$steps,list(activityData$date),FUN=sum)
hist(totalByDay$x,main='Total steps taken each day',xlab='Total steps')
theMean <-mean(totalByDay$x)
theMedian <- median(totalByDay$x)
activityPattern <-aggregate(activityData$steps,list(activityData$interval),FUN=mean)
colnames(activityPattern) <- c('Interval','Average')
plot(activityPattern$Interval,activityPattern$Average,type='l',xlab='Interval',ylab='Average Steps', main='Average steps taken by 5-minute interval')
totalMissing= sum(is.na(activityData_all))
for(i in 1:nrow(activityData_all))
{
if (is.na(activityData_all[i,]$steps))
{
curInterval <- activityData_all[i,]$interval
meanSteps <- activityPattern[activityPattern$Interval==curInterval,]$Average
activityData_all[i,]$steps<-meanSteps
}
}
activityData_all$date <- as.Date(activityData_all$date)
newTotalByDay <- aggregate(activityData_all$steps,list(activityData_all$date),FUN=sum)
hist(newTotalByDay$x, main='Total steps taken each day', xlab='Total steps')
theNewMean <-mean(newTotalByDay$x)
theNewMedian <- median(newTotalByDay$x)
activityData_all$typeOfDay <- ifelse(weekdays(activityData_all$date)== 'Saturday' | weekdays (activityData_all$date)== 'Sunday','weekend','weekday')
library(lattice)
View(activityData_all)
attach(activityData_all)
xyplot(steps ~ interval | typeOfDay,data=activityData_all,layout=c(1,2),type='l')
xyplot(sum(steps) ~ interval | typeOfDay,data=activityData_all,layout=c(1,2),type='l')
xyplot(steps ~ interval | typeOfDay,data=activityData_all,layout=c(1,2),type='l')
xyplot(mean(steps) ~ interval | typeOfDay,data=activityData_all,layout=c(1,2),type='l')
xyplot(steps ~ interval | typeOfDay,data=activityData_all,layout=c(1,2),type='l')
dataAveraged<-aggregate(activityData_all$steps,list(activityData_all$interval),FUN=mean)
detach()
attach(dataAveraged)
detach(activityData_all)
detach("activityData_all")
xyplot(dataAveraged$steps ~ dataAveraged$interval | dataAveraged$typeOfDay,data=dataAveraged,layout=c(1,2),type='l')
View(dataAveraged)
xyplot(activityData_all$steps ~ activityData_all$interval | activityData_all$typeOfDay,data=activityData_all,layout=c(1,2),type='l')
xyplot(activityData_all$steps ~ activityData_all$interval | activityData_all$typeOfDay,data=activityData_all,layout=c(1,2),type='l', ylab='Number of steps',xlab='Interval')
attach(mtcars)
aggdata <-aggregate(mtcars, by=list(cyl,vs),
FUN=mean)
print(aggdata)
View(aggdata)
detach(mtcars)
head(mtcars)
attach(activityData_all)
aggdata2<-aggregate(activityData_all,by=list(interval,typeOfDay),FUN=mean)
View(aggdata2)
aggdata2<-aggregate(activityData_all$steps,by=list(interval,typeOfDay),FUN=mean)
View(aggdata2)
detach(activityData_all)
colnames(avgData) <- c('interval','typeOfDay','average')
avgData<-aggData2
attach(activityData_all)
avgData<-aggregate(activityData_all$steps,by=list(interval,typeOfDay),FUN=mean)
detach(activityData_all)
colnames(avgData) <- c('interval','typeOfDay','average')
xyplot(avgData$steps ~ avgData$interval | avgData$typeOfDay,data =avgData,layout=c(1,2),type='l', ylab='Number of steps',xlab='Interval')
View(avgData)
xyplot(avgData$average ~ avgData$interval | avgData$typeOfDay,data =avgData,layout=c(1,2),
type='l', ylab='Number of steps',xlab='Interval')
library(knitr)
library(markdown)
knit(PA1_template.Rmd)
knit(PA1_template.Rmd)
getwd()
knit('PA1_template.Rmd')
knit2html(input='PA1_template.Rmd', output='PA1_template.html')
